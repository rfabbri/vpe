My method was to create a few .bmp images using xv and to download
a random one from the World Wide Web. Hexdumps follow:


// E.g. this is beginning of a .bmp file I
// downloaded from http://www.cs.columbia.edu/CAVE/curet :
//
//          _____ ___________ _____ _____ ___________ _____>
//00000000: 42 4D 36 10 0E 00 00 00 00 00 36 00 00 00|28 00 BM6.......6...(.
//         <_____ ___________ ___________ _____ _____ _____>
//00000010: 00 00 80 02 00 00 E0 01 00 00 01 00 18 00 00 00 ................
//         >_____ ___________ ___________ ___________ _____>
//00000020: 00 00 00 10 0E 00 00 00 00 00 00 00 00 00 00 00 ................
//         >_____ ___________ _____________________________
//00000030: 00 00 00 00 00 00|0A 0A 09 09 09 08 07 07 06 06 ................ bitmap
//          _______________________________________________
//00000040: 06 05 06 06 05 07 07 06 08 08 07 08 08 07 07 07 ................ bitmap
//          _______________________________________________
//00000050: 06 07 07 06 06 06 05 08 08 07 07 07 06 08 08 07 ................ bitmap
//          _______________________________________________
//00000060: 07 07 06 06 06 05 06 06 05 06 06 05 06 06 05 07 ................ bitmap
//
// The file is 921654 bytes long, which is 0x000e1036 in hex. Note that
// it's written into the file in little-endian format.
//
// The image is 640x480 which is 0x280 by 0x1e0 in hex.
//
// The image is in RGB byte format with 3*640*480 = 0xe1000 bytes of
// bitmap data.
//
// Here is the famous colour "pig" photo converted to bmp :
//          _____ ___________ _____ _____ ___________ _____>
//00000000: 42 4D DA E9 09 00 00 00 00 00 36 00 00 00 28 00 BM........6...(.
//         >_____ ___________ ___________ _____ _____ _____>
//00000010: 00 00 19 02 00 00 93 01 00 00 01 00 18 00 00 00 ................
//         >_____ ___________ ___________ ___________ _____>
//00000020: 00 00 A4 E9 09 00 6D 0B 00 00 6D 0B 00 00 00 00 ......m...m.....
//         >_____ ___________ _____________________________
//00000030: 00 00 00 00 00 00|6F 8C 93 72 8F 96 73 90 97 72 ......o..r..s..r
//          _______________________________________________
//00000040: 8F 96 74 91 98 77 94 9B 75 91 98 70 8C 93 75 8F ..t..w..u..p..u.
//          _______________________________________________
//00000050: 96 77 91 98 77 91 98 73 8D 94 75 8C 94 79 90 98 .w..w..s..u..y..


colour version of pig:

00000000: 42 4D|DA E9 09 00|00 00|00 00|36 00 00 00|28 00 BM........6...(.
00000010: 00 00|19 02 00 00|93 01 00 00|01 00|18 00|00 00 ................
00000020: 00 00|A4 E9 09 00|6D 0B 00 00|6D 0B 00 00|00 00 ......m...m.....
00000030: 00 00|00 00 00 00|6F 8C 93 72 8F 96 73 90 97 72 ......o..r..s..r
00000040: 8F 96 74 91 98 77 94 9B 75 91 98 70 8C 93 75 8F ..t..w..u..p..u.
00000050: 96 77 91 98 77 91 98 73 8D 94 75 8C 94 79 90 98 .w..w..s..u..y..
00000060: 79 90 98 77 8E 96 79 8F 95 7A 90 96 7B 8F 94 79 y..w..y..z..{..y
00000070: 8D 92 7B 8E 91 7F 92 95 80 92 93 7B 8D 8E 7B 8E ..{........{..{.
00000080: 91 7F 92 95 7F 92 99 79 8F 95 78 8C 97 76 8F 99 .......y..x..v..
00000090: 77 8F 9B 73 8E 98 76 8F 99 77 91 98 74 90 97 70 w..s..v..w..t..p
000000A0: 8D 94 71 8E 95 72 92 98 6F 91 97 6A 8C 92 6D 8F ..q..r..o..j..m.
000000B0: 95 70 92 98 73 93 99 70 90 96 72 8E 95 74 90 97 .p..s..p..r..t..
000000C0: 75 8F 96 72 8C 93 74 90 97 74 90 97 73 8F 96 73 u..r..t..t..s..s
000000D0: 8F 96 75 8F 96 75 8F 96 74 8E 95 74 8E 95 76 8D ..u..u..t..t..v.
000000E0: 95 77 8E 96 77 8E 96 78 8F 97 7A 8F 97 79 8E 96 .w..w..x..z..y..
000000F0: 79 8E 96 79 8E 96 78 8D 95 7D 92 9A 7A 91 99 73 y..y..x..}..z..s


gray scale verions of pig (yes, it is color mapped...):

00000000: 42 4D|4A 56 03 00|00 00|00 00|36 04 00 00|28 00 BMJV......6...(.
00000010: 00 00|19 02 00 00|93 01 00 00|01 00|08 00|00 00 ................
00000020: 00 00|14 52 03 00|6D 0B 00 00|6D 0B 00 00|00 01 ...R..m...m.....
00000030: 00 00|00 01 00 00|00 00 00 00 01 01 01 00 02 02 ................
00000040: 02 00 03 03 03 00 04 04 04 00 05 05 05 00 06 06 ................
00000050: 06 00 07 07 07 00 08 08 08 00 09 09 09 00 0A 0A ................
00000060: 0A 00 0B 0B 0B 00 0C 0C 0C 00 0D 0D 0D 00 0E 0E ................
00000070: 0E 00 0F 0F 0F 00 10 10 10 00 11 11 11 00 12 12 ................
00000080: 12 00 13 13 13 00 14 14 14 00 15 15 15 00 16 16 ................
00000090: 16 00 17 17 17 00 18 18 18 00 19 19 19 00 1A 1A ................
000000A0: 1A 00 1B 1B 1B 00 1C 1C 1C 00 1D 1D 1D 00 1E 1E ................
000000B0: 1E 00 1F 1F 1F 00 20 20 20 00 21 21 21 00 22 22 ......   .!!!.""
000000C0: 22 00 23 23 23 00 24 24 24 00 25 25 25 00 26 26 ".###.$$$.%%%.&&
000000D0: 26 00 27 27 27 00 28 28 28 00 29 29 29 00 2A 2A &.'''.(((.))).**
000000E0: 2A 00 2B 2B 2B 00 2C 2C 2C 00 2D 2D 2D 00 2E 2E *.+++.,,,.---...
000000F0: 2E 00 2F 2F 2F 00 30 30 30 00 31 31 31 00 32 32 ..///.000.111.22
00000100: 32 00 33 33 33 00 34 34 34 00 35 35 35 00 36 36 2.333.444.555.66


So, this is what I have learned. The first thing is a 'file header'.
Next is a 'core header' and an optional 'info header'. The presence of
the info header can be determined from the 'size' field in the core
header, so the info header is in a sense an extension of the core header.


file header: (size 14 bytes)
 2   42 4D         42 4D         magic numbers ("BM")
 4   DA E9 09 00   4A 56 03 00   file size (little endian) 0x9E9DA resp. 3564A
 2   00 00         00 00         reserved1
 2   00 00         00 00         reserved2
 4   36 00 00 00   36 04 00 00   offset to bitmap (= file+core+info header sizes + colormap size)

core header: (size 16 bytes (for Windows-bmp) or 12 bytes (for (old) OS2-bmp))
 4   28 00 00 00   28 00 00 00   size of core header + info header
 4/2 19 02 00 00   19 02 00 00   width   0x219 = 537
 4/2 93 01 00 00   93 01 00 00   height  0x193 = 403
 2   01 00         01 00         planes
 2   18 00         08 00         bits per pixel (bpp) - allowed values are: 1 4 8 16 24 32

info header: (only for Windows-bmp; size: 24 bytes)
 4   00 00 00 00   00 00 00 00   compression flag (0 ==> no compression)
 4   A4 E9 09 00   14 52 03 00   no. bytes of bitmap data (= file_size - offset_to_bitmap)
 4   6D 0B 00 00   6D 0B 00 00   horizontal pixels per meter (0xB6D = 2925 = 74.3 pixels/inch)
 4   6D 0B 00 00   6D 0B 00 00   vertical pixels per meter
 4   00 00 00 00   00 01 00 00   size of colourmap table (ctsz) (= 256) (can be up to 1<<bpp)
 4   00 00 00 00   00 01 00 00   important colour count (= ctsz)

colormap table: (size: ctsz * 4 (or 256 * 3 for OS2-bmp))
 ...... appears to be b,g,r,a for Windows-bmp and b,g,r for OS2-bmp

bitmap: (bottom row first, top row last; rows are padded to have multiple of 4 bytes per row)
 ......
