#!/usr/bin/env bash
#=============================================================================
# Copyright 2010-2012 Kitware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#=============================================================================

# This script makes optional suggestions for working with Git.

# Project configuration instructions: NONE

egrep-q() {
	egrep "$@" >/dev/null 2>/dev/null
}

echo '
==============
DEVELOPER TIPS  <-----  (Read it!)
==============
'

# Suggest color configuration.
if test -z "$(git config --get color.ui)"; then
	echo '
One may enable color output from Git commands with

  git config --global color.ui auto
'
fi

# Suggest bash completion.
if ! bash -i -c 'echo $PS1' | egrep-q '__git_ps1'; then
	echo '
* A dynamic, informative Git shell prompt can be obtained by sourcing
the git bash-completion script in your "~/.bashrc".  Set the PS1
environmental variable as suggested in the comments at the top of the
bash-completion script.  You may need to install the bash-completion
package from your distribution to obtain it.
'
fi

echo '
* Periodically, you may run scripts/update to fetch all remotes. It will not
merge anything. 

* You may also run scripts/test to test all packages (VXL, VXD, etc.).

* You should go through scripts/utils/configure-ubuntu-for-programming to
configure your Linux programming environment echo
script/utils/vxl also has other utilities you may want to use for VXL
programming.

* Remember to add script/utils/vxl to your PATH

* Basic workflow:
  cd ./vxl-bin
  ccmake ../vxl
  make   # use mymake from scripts/utils/vxl to run it from from both vxl-bin and vxl

  cd ../vxd-bin
  ccmake ../vxd
  make

  # Test
  scripts/test

* Switching bewtween source and bin folders
  The scripts in scripts/utils/vxl/ greatly help in traversing VXL/VXD folders
  
  cd vxl/core/vgl
  pwd
  # we are in vxl/core/vgl
  sw     # switches to *-bin
  # we are in vxl-bin/core/vgl  (useful for debugging)
  sw
  # we are back in vxl/core/vgl
  # 'mymake' will run from any of source or bin folders, as long as you keep
  # the VPE naming convention of appending a *-bin to your build folders or
  # symlinks

* Vim users: make sure you use exhuberant Ctags
  ctags --version    # must show exhuberant ctags
  ctags -R vxl vxd scripts
  # Now update your Vim tags variable to this. 
  # I put this in my ~/.vim/ftplugins/c_rfabbri.vim
  # set tags=./tags,tags,~/tags,~/src/vpe/tags
  # Adapt it to your case.

See  http://wiki.nosdigitais.teia.org.br/VXL  for detailed compile instructions, what
CMake flags to use, etc.'


echo '
Please use Git 2 or later with VPE! Instructions on how to upgrade your git in
Ubuntu Linux are available at scripts/utils/configure-ubuntu-for-programming.
'
